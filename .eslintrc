{
  globals: {
    _: true
  },
  plugins: [
    'jasmine',
    'react',
    'prettier'
  ],
  env: {
    es6: true,
    browser: true,
    jasmine: true
  },
  extends: [
    'plugin:jasmine/recommended',
    'prettier',
    'prettier/react'
  ],
  parserOptions: {
    ecmaFeatures: {
      experimentalObjectRestSpread: true,
      jsx: true,
      modules: true
    },
    ecmaVersion: 2017,
    sourceType: module
  },
  rules: {
    ////////// Possible Errors //////////
    no-cond-assign: 'error',               // disallow assignment in conditional expressions
    no-console: 'warn',                    // disallow use of console (off by default in the node environment) -> TODO: upgrade to error
    no-constant-condition: 'error',        // disallow use of constant expressions in conditions
    no-control-regex: 'error',             // disallow control characters in regular expressions
    no-debugger: 'error',                  // disallow use of debugger
    no-dupe-args: 'error',                 // disallow duplicate arguments when defining a function
    no-dupe-keys: 'error',                 // disallow duplicate keys when creating object literals
    no-duplicate-case: 'error',            // disallow duplicate case labels
    no-empty-character-class: 'error',     // disallow the use of empty character classes in regular expressions
    no-empty: 'error',                     // disallow empty statements
    no-ex-assign: 'error',                 // disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 'error',        // disallow double-negation boolean casts in a boolean context
    # no-extra-parens: [                     // disallow unnecessary parentheses
    #   'error',
    #   'all',
    #   {
    #     ignoreJSX: 'multi-line',
    #     nestedBinaryExpressions: false
    #   }
    # ],
    # no-extra-semi: 'error',                // disallow unnecessary semicolons
    no-func-assign: 'error',               // disallow overwriting functions written as function declarations
    no-inner-declarations: 'error',        // disallow function or variable declarations in nested blocks
    no-invalid-regexp: 'error',            // disallow invalid regular expression strings in the RegExp constructor
    no-irregular-whitespace: 'error',      // disallow irregular whitespace outside of strings and comments
    no-obj-calls: 'error',                 // disallow the use of object properties of the global object (Math and JSON) as functions
    no-prototype-builtins: 'error',        // disallow calling some Object.prototype methods directly on objects
    no-regex-spaces: 'error',              // disallow multiple spaces in a regular expression literal
    no-sparse-arrays: 'error',             // disallow sparse arrays
    no-template-curly-in-string: 'error',  // disallow template literal placeholder syntax in regular strings
    no-unexpected-multiline: 'error',      // disallow confusing multiline expressions
    no-unreachable: 'error',               // disallow unreachable statements after a return, throw, continue, or break statement
    no-unsafe-finally: 'error',            // disallow control flow statements in finally blocks
    no-unsafe-negation: 'error',           // disallow negating the left operand of relational operators
    use-isnan: 'error',                    // disallow comparisons with the value NaN
    valid-jsdoc: 'warn',                   // Ensure JSDoc comments are valid
    valid-typeof: 'error',                 // Ensure that the results of typeof are compared against a valid string

    ////////// Best Practices //////////

    accessor-pairs: 'error',                // enforce getter and setter pairs in objects
    array-callback-return: 'error',         // enforce return statements in callbacks of array methods
    block-scoped-var: 'error',              // treat var statements as if they were block scoped
    class-methods-use-this: 'error',        // enforce that class methods utilize this
    complexity: 'error',                    // specify the maximum cyclomatic complexity allowed in a program
    consistent-return: [                    // require return statements to either always or never specify values
      'error',
      { treatUndefinedAsUnspecified: true }
    ],
    curly: 'error',                         // specify curly brace conventions for all control statements
    default-case: 'error',                  // require default case in switch statements
    # dot-location: ['error', 'property'],    // enforce consistent newlines before and after dots
    dot-notation: 'error',                  // encourages use of dot notation whenever possible
    eqeqeq: 'error',                        // require the use of === and !==
    guard-for-in: 'error',                  // make sure for-in loops have an if statement
    no-alert: 'error',                      // disallow the use of alert, confirm, and prompt
    no-caller: 'error',                     // disallow use of arguments.caller or arguments.callee
    no-case-declarations: 'error',          // disallow lexical declarations in case clauses
    no-div-regex: 'error',                  // disallow division operators explicitly at beginning of regular expression
    no-else-return: 'error',                // disallow else after a return in an if
    # no-empty-function: 'error',             // disallow empty functions  -> TODO: considering either disabling for tests or using _.noop
    no-empty-pattern: 'error',              // disallow empty destructuring patterns
    no-eq-null: 'error',                    // disallow comparisons to null without a type-checking operator
    no-eval: 'error',                       // disallow use of eval()
    no-extend-native: 'error',              // disallow adding to native types
    no-extra-bind: 'error',                 // disallow unnecessary function binding
    no-extra-label: 'error',                // disallow unnecessary labels
    no-fallthrough: 'error',                // disallow fallthrough of case statements
    # no-floating-decimal: 'error',           // disallow the use of leading or trailing decimal points in numeric literals
    no-global-assign: 'error',              // disallow assignments to native objects or read-only global variables
    no-implicit-coercion: 'error',          // disallow shorthand type conversions
    # no-implicit-globals: 'error',           // disallow variable and function declarations in the global scope -> TODO: enable after ng2 upgrade
    no-implied-eval: 'error',               // disallow use of eval()-like methods
    no-invalid-this: 'off',               // disallow this keywords outside of classes or class-like objects
    no-iterator: 'error',                   // disallow usage of __iterator__ property
    no-labels: 'error',                     // disallow use of labeled statements
    no-lone-blocks: 'error',                // disallow unnecessary nested blocks
    no-loop-func: 'error',                  // disallow creation of functions within loops
    no-magic-numbers: [                     // disallow magic numbers -> TODO: upgrade to error
      'warn',
      {
        ignoreArrayIndexes: true,
        ignore: [-1, 0, 1]
      }
    ],
    # no-multi-spaces: 'error',               // disallow use of multiple spaces
    no-multi-str: 'error',                  // disallow use of multiline strings
    no-new-func: 'error',                   // disallow use of new operator for Function object
    no-new-wrappers: 'error',               // disallows creating new instances of String, Number, and Boolean
    no-new: 'error',                        // disallow use of new operator when not part of the assignment or comparison
    no-octal-escape: 'error',               // disallow use of octal escape sequences in string literals, such as var foo = Copyright \251;
    no-octal: 'error',                      // disallow use of octal literals
    no-param-reassign: 'error',             // disallow reassigning function parameters
    no-proto: 'error',                      // disallow usage of __proto__ property
    no-redeclare: 'error',                  // disallow declaring the same variable more then once
    no-restricted-properties: 'error',      // disallow certain properties on certain objects
    no-return-assign: 'error',              // disallow use of assignment in return statement
    no-script-url: 'error',                 // disallow use of javascript: urls.
    no-self-assign: 'error',                // disallow assignments where both sides are exactly the same
    no-self-compare: 'error',               // disallow comparisons where both sides are exactly the same
    no-sequences: 'error',                  // disallow use of comma operator
    no-throw-literal: 'error',              // disallow throwing literals as exceptions
    no-unmodified-loop-condition: 'error',  // disallow unmodified loop conditions
    no-unused-expressions: 'error',         // disallow usage of expressions in statement position
    no-unused-labels: 'error',              // disallow unused labels
    no-useless-call: 'error',               // disallow unnecessary calls to .call() and .apply()
    no-useless-concat: 'error',             // disallow unnecessary concatenation of literals or template literals
    no-useless-escape: 'error',             // disallow unnecessary escape characters
    no-void: 'error',                       // disallow use of void operator
    no-with: 'error',                       // disallow use of the with statement
    radix: 'error',                         // require use of the second argument for parseInt()
    vars-on-top: 'warn',                    // requires to declare all vars on top of their containing scope
    # wrap-iife: 'error',                     // require immediate function invocation to be wrapped in parentheses
    yoda: 'error',                          // require or disallow Yoda conditions

    ////////// Strict Mode //////////

    # strict: ['error', 'never'],             // disallow strict mode directives -> TODO: enable after ng2 upgrade

    ////////// Variables //////////

    no-catch-shadow: 'error',             // disallow catch clause parameters from shadowing variables in the outer scope
    no-delete-var: 'error',               // disallow deleting variables
    no-label-var: 'error',                // disallow labels that share a name with a variable
    no-restricted-globals: 'error',       // disallow specified global variables
    no-shadow-restricted-names: 'error',  // disallow identifiers from shadowing restricted names
    no-shadow: 'warn',                    // disallow variable declarations from shadowing variables declared in the outer scope -> consider either disabling for tests or fix all tests in a separate story and then switch to error
    no-undef-init: 'error',               // disallow initializing variables to undefined
    # no-undef: 'error',                    // disallow the use of undeclared variables unless mentioned in /*global */ comments
    no-undefined: 'warn',                 // disallow the use of undefined as an identifier
    # no-unused-vars: 'error',              // disallow unused variables -> enabled after UI repo integration
    # no-use-before-define: 'warn',         // disallow the use of variables before they are defined -> meh

    ////////// Stylistic Issues //////////

    # array-bracket-spacing: 'error',              // enforce consistent spacing inside array brackets
    # block-spacing: 'error',                      // enforce consistent spacing inside single-line blocks
    # brace-style: 'error',                        // enforce consistent brace style for blocks
    camelcase: 'error',                          // enforce camelcase naming convention
    # comma-dangle: 'error',                       // require or disallow trailing commas
    # comma-spacing: 'error',                      // enforce consistent spacing before and after commas
    # comma-style: 'error',                        // enforce consistent comma style
    # computed-property-spacing: 'error',          // enforce consistent spacing inside computed property brackets
    consistent-this: ['error', 'self'],          // enforce consistent naming when capturing the current execution context
    # eol-last: 'error',                           // require or disallow newline at the end of files
    # func-call-spacing: 'error',                  // require or disallow spacing between function identifiers and their invocations
    id-blacklist: 'error',                       // disallow specified identifiers
    id-length: [                                 // enforce minimum and maximum identifier lengths
      'error',
      { exceptions: ['i', 'j'] }
    ],
    id-match: 'error',                           // require identifiers to match a specified regular expression
    # indent: [                                    // enforce consistent indentation
    #   'error',
    #   2,
    #   {
    #     MemberExpression: 0,
    #     SwitchCase: 1
    #   }
    # ],
    # key-spacing: 'error',                             // enforce consistent spacing between keys and values in object literal properties
    # keyword-spacing: 'error',                         // enforce consistent spacing before and after keywords
    linebreak-style: 'error',                         // enforce consistent linebreak style
    # lines-around-comment: [                           // require empty lines around comments
    #   'error',
    #   {
    #     beforeLineComment: true,
    #     allowBlockStart: true
    #   }
    # ],
    lines-around-directive: 'error',                  // require or disallow newlines around directives
    max-depth: 'error',                               // enforce a maximum depth that blocks can be nested
    # max-len: [                                        // enforce a maximum line length
    #   'warn',
    #   110,
    #   2,
    #   { ignoreComments: true }
    # ],
    max-lines: [                                      // enforce a maximum number of lines per file -> TODO: change to error
      'warn',
      {
        max: 450,
        skipBlankLines: true,
        skipComments: true
      }
    ],
    max-nested-callbacks: ['warn', { max: 4 }],       // enforce a maximum depth that callbacks can be nested
    # max-params: 'error',                            // enforce a maximum number of parameters in function definitions -> TODO: Enable after ng2 conversion
    max-statements-per-line: 'error',                 // enforce a maximum number of statements allowed per line
    max-statements: ['warn', { max: 25 }],            // enforce a maximum number of statements allowed in function blocks
    new-cap: 'error',                                 // require constructor names to begin with a capital letter
    # new-parens: 'error',                              // require parentheses when invoking a constructor with no arguments
    newline-after-var: 'error',                       // require or disallow an empty line after variable declarations
    newline-before-return: 'error',                   // require an empty line before return statements
    # newline-per-chained-call: 'error',                // require a newline after each call in a method chain
    no-array-constructor: 'error',                    // disallow Array constructors
    no-bitwise: 'error',                              // disallow bitwise operators
    no-continue: 'error',                             // disallow continue statements
    no-lonely-if: 'error',                            // disallow if statements as the only statement in else blocks
    # no-mixed-operators: 'error',                      // disallow mixed binary operators
    # no-mixed-spaces-and-tabs: 'error',                // disallow mixed spaces and tabs for indentation
    # no-multiple-empty-lines: 'error',                 // disallow multiple empty lines
    no-negated-condition: 'error',                    // disallow negated conditions
    no-nested-ternary: 'error',                       // disallow nested ternary expressions
    no-new-object: 'error',                           // disallow Object constructors
    no-plusplus: 'error',                             // disallow the unary operators ++ and --
    # no-trailing-spaces: 'error',                      // disallow trailing whitespace at the end of lines
    no-underscore-dangle: 'warn',                     // disallow dangling underscores in identifiers
    no-unneeded-ternary: 'error',                     // disallow ternary operators when simpler alternatives exist
    # no-whitespace-before-property: 'error',           // disallow whitespace before properties
    # object-curly-newline: 'error',                    // enforce consistent line breaks inside braces
    # object-curly-spacing: ['error', 'always'],        // enforce consistent spacing inside braces
    # object-property-newline: 'warn',                  // enforce placing object properties on separate lines
    # one-var-declaration-per-line: 'error',            // require or disallow newlines around variable declarations
    one-var: ['error', 'never'],                      // enforce variables to be declared either together or separately in functions
    # operator-linebreak: 'error',                      // enforce consistent linebreak style for operators
    # padded-blocks: ['error', 'never'],                // require or disallow padding within blocks
    # quote-props: ['error', 'as-needed'],              // require quotes around object literal property names
    # quotes: ['error', 'single'],                      // enforce the consistent use of either backticks, double, or single quotes
    # require-jsdoc: 'warn',                            // require JSDoc comments - TODO: enable this when we have time to go through and add JS docs to everything or at least a large number of things...
    # semi-spacing: 'error',                            // enforce consistent spacing before and after semicolons
    # semi: 'error',                                    // require or disallow semicolons instead of ASI
    # space-before-blocks: 'error',                     // enforce consistent spacing before blocks
    # space-before-function-paren: ['error', 'never'],  // enforce consistent spacing before function definition opening parenthesis
    # space-in-parens: 'error',                         // enforce consistent spacing inside parentheses
    # space-infix-ops: 'error',                         // require spacing around infix operators
    # space-unary-ops: 'error',                         // enforce consistent spacing before or after unary operators
    spaced-comment: 'error',                          // enforce consistent spacing after the // or /* in a comment
    # unicode-bom: 'error',                             // require or disallow Unicode byte order mark (BOM)

    ////////// ECMAScript 6 //////////

    arrow-body-style: 'error',         // require braces around arrow function bodies
    # arrow-parens: 'error',             // require parentheses around arrow function arguments
    # arrow-spacing: 'error',            // enforce consistent spacing before and after the arrow in arrow functions
    constructor-super: 'error',        // require super() calls in constructors
    # generator-star-spacing: 'error',   // enforce consistent spacing around * operators in generator functions
    no-class-assign: 'error',          // disallow reassigning class members
    # no-confusing-arrow: [              // disallow arrow functions where they could be confused with comparisons
    #   'error',
    #   { allowParens: true }
    # ],
    no-const-assign: 'error',          // disallow reassigning const variables
    no-dupe-class-members: 'error',    // disallow duplicate class members
    no-duplicate-imports: 'error',     // disallow duplicate module imports
    no-new-symbol: 'error',            // disallow new operators with the Symbol object
    no-restricted-imports: 'error',    // disallow specified modules when loaded by import
    no-this-before-super: 'error',     // disallow this/super before calling super() in constructors
    no-useless-computed-key: 'error',  // disallow unnecessary computed property keys in object literals
    no-useless-constructor: 'error',   // disallow unnecessary constructors
    no-useless-rename: 'error',        // disallow renaming import, export, and destructured assignments to the same name
    no-var: 'error',                   // require let or const instead of var
    # object-shorthand: [                // require or disallow method and property shorthand syntax for object literals
    #   'error',
    #   'never'
    # ],
    prefer-arrow-callback: 'off',      // don't require arrow functions as callbacks
    prefer-const: 'error',             // require const declarations for variables that are never reassigned after declared
    prefer-numeric-literals: 'error',  // disallow parseInt() in favor of binary, octal, and hexadecimal literals
    prefer-rest-params: 'error',       // require rest parameters instead of arguments
    prefer-spread: 'error',            // require spread operators instead of .apply()
    prefer-template: 'error',          // require template literals instead of string concatenation
    require-yield: 'error',            // require generator functions to contain yield
    # rest-spread-spacing: 'error',      // enforce spacing between rest and spread operators and their expressions
    # sort-imports: 'error',             // enforce sorted import declarations within modules
    symbol-description: 'error',       // require symbol descriptions
    # template-curly-spacing: 'error',   // require or disallow spacing around embedded expressions of template strings
    # yield-star-spacing: 'error',       // require or disallow spacing around the * in yield* expressions


    ////////// React //////////

    # react/boolean-prop-naming: 'error',
    # react/default-props-match-prop-types: 'error',       // Prevent extraneous defaultProps on components
    react/display-name: 'off',                           // Prevent missing displayName in a React component definition
    react/forbid-component-props: 'off',                 // Forbid certain props on Components
    # react/forbid-elements: 'error',                      // Forbid certain elements
    react/forbid-prop-types: 'off',                      // Forbid certain propTypes
    # react/forbid-foreign-prop-types: 'error',            // Forbid foreign propTypes
    # react/no-array-index-key: 'error',                   // Prevent using Array index in key props

    react/no-children-prop: 'error',                     // Prevent passing children as props
    react/no-danger: 'error',                            // Prevent usage of dangerous JSX properties
    react/no-danger-with-children: 'error',              // Prevent problem with children and props.dangerouslySetInnerHTML
    react/no-deprecated: 'error',                        // Prevent usage of deprecated methods
    react/no-did-mount-set-state: 'error',               // Prevent usage of setState in componentDidMount
    react/no-did-update-set-state: 'error',              // Prevent usage of setState in componentDidUpdate
    react/no-direct-mutation-state: 'error',             // Prevent direct mutation of this.state
    react/no-find-dom-node: 'error',                     // Prevent usage of findDOMNode
    react/no-is-mounted: 'error',                        // Prevent usage of isMounted
    react/no-multi-comp: [                               // Prevent multiple component definition per file
      'error',
      { ignoreStateless: true }
    ],
    # react/no-redundant-should-component-update: 'error', // Prevent usage of shouldComponentUpdate when extending React.PureComponent
    react/no-render-return-value: 'error',               // Prevent usage of the return value of React.render
    react/no-set-state: 'error',                         // Prevent usage of setState
    react/no-string-refs: 'error',                       // Prevent using string references in ref attribute.
    react/no-unescaped-entities: 'error',                // Prevent invalid characters from appearing in markup
    react/no-unknown-property: 'error',                  // Prevent usage of unknown DOM property (fixable)
    react/no-unused-prop-types: 'error',                 // Prevent definitions of unused prop types
    # react/no-will-update-set-state: 'error',             // Prevent usage of setState in componentWillUpdate
    react/prefer-es6-class: 'error',                     // Enforce ES5 or ES6 class for React Components
    react/prefer-stateless-function: 'error',            // Enforce stateless React Components to be written as a pure function
    react/prop-types: 'error',                           // Prevent missing props validation in a React component definition
    react/react-in-jsx-scope: 'error',                   // Prevent missing React when using JSX
    # react/require-default-props: 'error',                // Enforce a defaultProps definition for every prop that is not a required prop
    react/require-optimization: 'error',                 // Enforce React components to have a shouldComponentUpdate method
    react/require-render-return: 'error',                // Enforce ES5 or ES6 class for returning value in render function
    react/self-closing-comp: 'error',                    // Prevent extra closing tags for components without children (fixable)
    react/sort-comp: 'error',                            // Enforce component methods order
    react/sort-prop-types: 'error',                      // Enforce propTypes declarations alphabetical sorting
    react/style-prop-object: 'error',                    // Enforce style prop value being an object
    # react/void-dom-elements-no-children: 'error',        // Prevent void DOM elements (e.g. <img />, <br />) from receiving children

    ////////// JSX-specific rules //////////

    react/jsx-boolean-value: 'error',                    // Enforce boolean attributes notation in JSX (fixable)
    # react/jsx-closing-bracket-location: 'error',         // Validate closing bracket location in JSX (fixable)
    # react/jsx-closing-tag-location: 'error',             // Validate closing tag location in JSX (fixable)
    # react/jsx-curly-spacing: 'error',                    // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions (fixable)
    # react/jsx-equals-spacing: 'error',                   // Enforce or disallow spaces around equal signs in JSX attributes (fixable)
    react/jsx-filename-extension: 'off',                 // Restrict file extensions that may contain JSX
    # react/jsx-first-prop-new-line: 'error',              // Enforce position of the first prop in JSX (fixable)
    react/jsx-handler-names: 'off',                      // Enforce event handler naming conventions in JSX
    # react/jsx-indent: ['error', 2],                      // Validate JSX indentation (fixable)
    # react/jsx-indent-props: ['error', 2],                // Validate props indentation in JSX (fixable)
    react/jsx-key: 'error',                              // Validate JSX has key prop when in array or iterator
    # react/jsx-max-props-per-line: 'error',               // Limit maximum of props on a single line in JSX (fixable)
    react/jsx-no-bind: 'off',                            // Prevent usage of .bind() and arrow functions in JSX props
    react/jsx-no-comment-textnodes: 'error',             // Prevent comments from being inserted as text nodes
    react/jsx-no-duplicate-props: 'error',               // Prevent duplicate props in JSX
    react/jsx-no-literals: 'error',                      // Prevent usage of unwrapped JSX strings
    react/jsx-no-target-blank: 'error',                  // Prevent usage of unsafe target='_blank'
    react/jsx-no-undef: 'error',                         // Disallow undeclared variables in JSX
    react/jsx-pascal-case: 'error',                      // Enforce PascalCase for user-defined JSX components
    react/jsx-sort-props: [                              // Enforce props alphabetical sorting
      'error',
      {
        callbacksLast: true
      }
    ],
    # react/jsx-space-before-closing: 'error',             // Validate spacing before closing bracket in JSX (fixable)
    # react/jsx-tag-spacing: 'error',                      // Validate whitespace in and around the JSX opening and closing brackets (fixable)
    react/jsx-uses-react: 'error',                       // Prevent React to be incorrectly marked as unused
    react/jsx-uses-vars: 'error',                        // Prevent variables used in JSX to be incorrectly marked as unused
    # react/jsx-wrap-multilines: 'error',                  // Prevent missing parentheses around multilines JSX (fixable)

    ////////// Prettier //////////

    prettier/prettier: [
      'error',
      {
        semi: false,
        singleQuote: true
      }
    ]
  }
}
